name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Executa este pipeline apenas quando houver push para o branch main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'adopt'
          server-id: github
          server-username: ${{ github.actor }}
          server-password: ${{ github.token }}

      - name: Maven Tests
        run: mvn test

      - name: Maven Package
        run: mvn -B -Pprod -DprofileIdEnabled=true -Dmaven.test.skip=true clean package

      - name: Archive Production Artifact
        uses: actions/upload-artifact@v2
        with:
          name: api-artifact
          path: api/target/**/*.jar
          retention-days: 1  # Opcional: define por quantos dias o artefato deve ser retido

      - name: Build Docker Images
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          KAFKA_SERVER: ${{ secrets.KAFKA_SERVER }}
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
          MONGO_DATABASE_URL: ${{ secrets.MONGO_DATABASE_URL }}
          MONGO_DATABASE_AUDIT_URL: ${{ secrets.MONGO_DATABASE_AUDIT_URL }}
          SPRING_PROFILES_ACTIVE: dev
        run: |
          docker build --build-arg DATABASE_URL=$DATABASE_URL \
                       --build-arg DATABASE_USER=$DATABASE_USER \
                       --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD \
                       --build-arg REDIS_URL=$REDIS_URL \
                       --build-arg REDIS_PORT=$REDIS_PORT \
                       --build-arg KAFKA_SERVER=$KAFKA_SERVER \
                       --build-arg NEW_RELIC_LICENSE_KEY=$NEW_RELIC_LICENSE_KEY \
                       --build-arg MONGO_DATABASE_URL=$MONGO_DATABASE_URL \
                       --build-arg MONGO_DATABASE_AUDIT_URL=$MONGO_DATABASE_AUDIT_URL \
                       --build-arg SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE \
                       -t api -f api/Dockerfile .
          
          docker tag api:latest ${{ secrets.AWS_ECR_REGISTRY }}/api:latest
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/api:latest

      - name: Deploy to ECS
        env:
          CLUSTER_NAME: backend
          SERVICE_NAME: api
          TASK_DEFINITION: tasks/task-api.json
        run: |
          # Comandos para deploy no ECS usando AWS CLI ou outras ferramentas necess√°rias
          echo "Deploying to ECS cluster $CLUSTER_NAME, service $SERVICE_NAME"
