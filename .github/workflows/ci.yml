name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Executa este pipeline apenas quando houver push para o branch main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Maven Tests
        run: mvn test

      - name: Maven Package
        run: mvn -B -Pprod -DprofileIdEnabled=true -Dmaven.test.skip=true clean package

      - name: Archive Production Artifact
        uses: actions/upload-artifact@v2
        with:
          name: api-artifact
          path: api/target/**/*.jar
          retention-days: 1  # Opcional: define por quantos dias o artefato deve ser retido

      - name: Build Docker Images
        env:
          SPRING_PROFILES_ACTIVE: prod  # Defina o perfil de Spring correto aqui
          NEW_RELIC_LICENSE_KEY: ${{ secrets.NEW_RELIC_LICENSE_KEY }}  # Defina esta vari√°vel no GitHub Secrets
        run: |
          docker build --build-arg NEW_RELIC_LICENSE_KEY=$NEW_RELIC_LICENSE_KEY --build-arg SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE -t api -f api/Dockerfile .

          docker tag api:latest ${{ secrets.AWS_ECR_REGISTRY }}/backend-api:${{ github.sha }}
          docker tag api:latest ${{ secrets.AWS_ECR_REGISTRY }}/backend-api:latest

          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/backend-api:${{ github.sha }}
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/backend-api:latest

      - name: Deploy to ECS
        env:
          CLUSTER_NAME: backend-api
          SERVICE_NAME: api
          TASK_DEFINITION: tasks/task-api.json
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment