name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Executa este pipeline apenas quando houver push para o branch main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Maven Tests
        run: mvn test

      - name: Maven Package
        run: mvn -B -f path/to/your/application/module/pom.xml -Dmaven.test.skip=true clean package

      - name: Archive Production Artifact
        uses: actions/upload-artifact@v2
        with:
          name: api-artifact
          path: path/to/your/application/module/target/**/*.jar
          retention-days: 1  # Opcional: define por quantos dias o artefato deve ser retido

      - name: Build Docker Images
        run: |
          # Verifique se o arquivo JAR foi realmente criado no diretório esperado
          if [ -f path/to/your/application/module/target/*.jar ]; then
            echo "Arquivo JAR encontrado, iniciando build do Docker..."
          else
            echo "Erro: Arquivo JAR não encontrado!"
            exit 1
          fi
          
          docker build --build-arg SPRING_PROFILES_ACTIVE=default \
                       -t api -f path/to/your/application/module/Dockerfile path/to/your/application/module
          
          docker tag api:latest ${{ secrets.AWS_ECR_REGISTRY }}/api:latest
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/api:latest

      - name: Deploy to ECS
        env:
          CLUSTER_NAME: backend
          SERVICE_NAME: api
          TASK_DEFINITION: tasks/task-api.json
        run: |
          # Comandos para deploy no ECS usando AWS CLI ou outras ferramentas necessárias
          echo "Deploying to ECS cluster $CLUSTER_NAME, service $SERVICE_NAME"
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
